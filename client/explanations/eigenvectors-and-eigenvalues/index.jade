include ../../templates/common.jade

doctype html
html
  head
    include ../../templates/head
    include ../../templates/explanation-head
    link(rel="stylesheet" href= path + "style.css" type="text/css")

    script(type="text/x-mathjax-config").
      MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [['$','$'], ['\\(','\\)']],
          skipTags: ["script","noscript","style","textarea","code"]
        }
      });

    // DEPRECATED
    // script(type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML")

    script(async src="https://cdn.jsdelivr.net/npm/mathjax@2/unpacked/MathJax.js?config=TeX-AMS_HTML")

    // ALTERNATIVES
    // script(src="https://cdn.jsdelivr.net/npm/mathjax@2/unpacked/MathJax.js")
    // script(src="https://cdn.jsdelivr.net/npm/mathjax@2/config/TeX-AMS_HTML-full.js")
    // script(src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js")
    // script(src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/config/TeX-AMS_HTML.js")

  body(ng-app="myApp" ng-controller="MainCtrl")
    section.menu
      a(href=basepath) Back
    section.title
      .title-region
        h1.title !{title}
        h3.by-line !{subtitle}
      +share
    section(ng-controller="IntroCtrl")
      +authors

      :markdown
        Eigenvalues/vectors are instrumental to understanding electrical circuits, mechanical systems, ecology and even Google's [PageRank](http://www.rose-hulman.edu/~bryan/googleFinalVersionFixed.pdf) algorithm. Let's see if visualization can make these ideas more intuitive.

        To begin, let $v$ be a vector (shown as a point) and $A$ be a matrix with columns $a_1$ and $a_2$ (shown as arrows). If we multiply $v$ by $A$, then $A$ sends $v$ to a new vector $Av$.

      div(ng-controller="BasisCtrl" style="position:relative")
        simple-plot
        //- div(style="position:absolute;right: 150px; top: 123px")
          button.btn.primary multiply
        div(style="position:absolute; right: 95px; top: 50px;")
          matrix-equation
            eq-element(label="'Α'")
            eq-element(label="'='")
            eq-matrix(class="primary-and-secondary" values="[ [opt.basis1[0], opt.basis2[0]], [opt.basis1[1], opt.basis2[1]]]" labels="[['a₁,x', 'a₂,x'], ['a₁,y', 'a₂,y']]" active="false")
            eq-element(label="'='")
            eq-matrix(clasifs="primary-and-secondary" values="[ [opt.basis1[0], opt.basis2[0]], [opt.basis1[1], opt.basis2[1]]]" active="true")

        div(style="position:absolute; right: 224px; top: 125px;")
          matrix-equation
            eq-element(class="tertiary" label="'v'")
            eq-element(label="'='")
            eq-vector(values="opt.pos0" labels="['v, x', 'v, y']" active="true" class="tertiary")

        div(style="position:absolute; right: 224px; top: 200px;")
          matrix-equation
            eq-element(class="tertiary" label="'Αv'")
            eq-element(label="'='")
            eq-vector(values="opt.pos1" labels="['v, x', 'v, y']" active="true" class="tertiary")

        :markdown

        p
          :markdown
            If you can draw a line through the three points $(0,0)$, $v$ and $Av$, then $Av$ is just $v$ multiplied by a number $\lambda$; that is, $Av = \lambda v$. In this case, we call $\lambda$ an __eigenvalue__ and $v$ an __eigenvector__. For example, here $(1,2)$ is an eigvector and $5$ an eigenvalue.

        script(type="math/tex; mode=display").
            A v = 
            \begin{pmatrix}
              1 & 2 \\
              8 & 1
            \end{pmatrix}
            \cdot
            \begin{pmatrix}
              1 \\ 2
            \end{pmatrix}
            =
            5
            \begin{pmatrix}
              1 \\ 2
            \end{pmatrix}
            = \lambda v.

        :markdown
          Below, change the columns of $A$ and drag $v$ to be an eigenvector. Note three facts: First, every point on the same line as an eigenvector is an eigenvector. Those lines are  __eigenspaces__, and each has an associated eigenvalue.  Second, if you place $v$ on an eigenspace (either $s_1$ or $s_2$) with associated eigenvalue $\lambda<1$, then $Av$ is closer to $(0,0)$ than $v$; but when $\lambda>1$, it's farther. Third, both eigenspaces depend on both columns of $A$: it is not as though $a_1$ only affects $s_1$.

        div(ng-controller="TransCtrl")
          simple-plot
          p
            :markdown
              ###What are eigenvalues/vectors good for?
              If you keep multiplying $v$ by $A$, you get a sequence $\{ v, Av, A^2v,\}$ etc. Eigenspaces attract that sequence and eigenvalues tell you whether it ends up at $(0,0)$ or far away. Therefore, eigenvectors/values tell us about systems that evolve step-by-step.

          div(ng-controller="PopulationCtrl")
            simple-plot

          p
            :markdown
              Let's explore some applications and properties of these sequences.

    section(ng-controller="BacteriaCtrl")
      p
        :markdown
          ###Fibonacci Sequence
          Suppose you have some amoebas in a petri dish. Every minute, all adult amoebas produce one child amoeba, and all child amoebas grow into adults (Note: this is not really how amoebas reproduce.). So if $t$ is a minute, the equation of this system is

        script(type="math/tex; mode=display").
            \begin{eqnarray} 
              \text{adults}_{t+1} & = & \text{adults}_{t} + \text{children}_{t} \\
              \text{children}_{t+1} & = & \text{adults}_{t}
            \end{eqnarray}  

        :markdown
          which we can rewrite in matrix form like

        script(type="math/tex; mode=display").
          \begin{eqnarray}
          v_{t+1} &=& A & ⋅& v_t
          \\
            \begin{pmatrix}
              \text{adults}_{t+1} \\ \text{children}_{t+1}
            \end{pmatrix}  
            &=&
            \begin{pmatrix}
              1 & 1 \\
              1 & 0
            \end{pmatrix}
            & \cdot & 
            \begin{pmatrix}
              \text{adults}_{t} \\
              \text{children}_{t}
            \end{pmatrix}

          \end{eqnarray}


        :markdown
          Below, press "Forward" to step ahead a minute. The total population is the [Fibonacci Sequence](http://en.wikipedia.org/wiki/Fibonacci_number).

      p
        //- input(type="range" ng-model="charge" min="-10" max="0" step="0.1")
        //- | Charge: {{charge}}
        div
          bacteria-simulation(style="float: left; display: block")
          div(ng-controller="BacteriaPlotCtrl" style="display:inline-block")
            bacteria-plot
        div(style="text-align:center")
          button.btn.primary(ng-click="reset()") reset
          button.btn.primary(ng-click="forward()") forward
        br
        br
        div(style="text-align: center")
          {{opt.pos[opt.curGen][0]}} {{opt.pos[opt.curGen][0] === 1 ? 'child' : 'children' }} + {{opt.pos[opt.curGen][1]}} {{opt.pos[opt.curGen][1] === 1 ? 'adult' : 'adults' }} = {{opt.pos[opt.curGen][0] + opt.pos[opt.curGen][1]}}
          fibonacci-sequence

        :markdown
          As you can see, the system goes toward the grey line, which is an eigenspace with  $\lambda = (1+\sqrt 5)/2 > 1$.

          ###Steady States

          Suppose that, every year, a fraction $p$ of New Yorkers move to California and a fraction $q$ of Californians move to New York. Drag the circles to decide these fractions and the number starting in each state.

    section(ng-controller="MigrationCtrl")
      sf-to-ny-migration-map
      p
        :markdown
          To understand the system better, we can start by writing it in matrix terms like:

      script(type="math/tex; mode=display").
          \begin{eqnarray}
           v_{t+1} &          = &  Av_t
          \\
          \begin{pmatrix}
            \text{New York}_{t+1} \\ \text{California}_{t+1}
          \end{pmatrix}  
          &=&
          \begin{pmatrix}
            1-p & q \\
            p & 1-q
          \end{pmatrix}
          \cdot 
          \begin{pmatrix}
            \text{New York}_{t} \\
            \text{California}_{t}
          \end{pmatrix}
                \end{eqnarray}

      p
        :markdown
          It turns out that a matrix like $A$, whose entries are positive and whose columns add up to one (try it!), is called a [Markov matrix](http://www.math.harvard.edu/~knill/teaching/math19b_2011/handouts/lecture33.pdf), and it always has $\lambda = 1$ as its largest eigenvalue.  That means there's a value of $v_t$ for which $Av_t =\lambda v_t = 1 v_t = v_t$. At this "steady state," the same number of people move in each direction, and the populations stay the same forever. Hover over the animation to see the system go to the steady state.

      div(ng-controller="StochasticMatrixMultiplicationCtrl" style="position:relative")
        migration(style="width:70%;float:left")
        stochastic-matrix-multiplication(style="width:30%;float:left")
      div(style="clear:both")

      :markdown
        For more on Markov matrices, check out our explanation of [Markov Chains](http://setosa.io/ev/markov-chains/).

        #Complex eigenvalues

        So far we've only looked at systems with real eigenvalues. But looking at the equation  $ Av = \lambda v$, who's to say $\lambda$ and $v$ can't have some imaginary part? That it can't be a [complex](http://en.wikipedia.org/wiki/Complex_number) number? For example, 

      script(type="math/tex; mode=display").
          \begin{pmatrix}
            1 & 1 \\
            -1 & 1
          \end{pmatrix}
          \cdot
          \begin{pmatrix}
            1 \\ i
          \end{pmatrix}
          =
          (1+i)
          \cdot
          \begin{pmatrix}
            1 \\ i
          \end{pmatrix}.

      :markdown
        Here, $1+i$ is an eigenvalue and $(1, i)$ is an eigenvector. 

        If a matrix has complex eigenvalues, its sequence spirals around $(0,0)$. To see this, drag $A$'s columns (the arrows) around until you get a spiral. The eigenvalues are plotted in the real/imaginary plane to the right. You'll see that whenever the eigenvalues have an imaginary part, the system spirals, no matter where you start things off.

    section(ng-controller="FourQuadCtrl")
      | steps:
      input(type="range" min="2" max="opt.maxPoints" ng-model="opt.n")
      four-quad-plot
    br
    br

    p
      :markdown
        ###Learning more
        We've really only scratched the surface of what linear algebra is all about. To learn more, check out the legendary Gilbert Strang's [Linear Algebra](http://ocw.mit.edu/courses/mathematics/18-06sc-linear-algebra-fall-2011/least-squares-determinants-and-eigenvalues/eigenvalues-and-eigenvectors/) course at MIT's Open Courseware site. To get more practice with applications of eigenvalues/vectors, also ceck out the excellent [Differential Equations](http://ocw.mit.edu/courses/mathematics/18-03sc-differential-equations-fall-2011/) course.

    div.layer.tooltips
    if !dev
      +footer
      +disqus
  script(src=basepath + "scripts/topojson.js" charset="utf-8")
  script(src=path + "script.js")
